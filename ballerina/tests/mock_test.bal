// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/test;

final Client mockClient = check new (
    {
        auth: {
            token: "test-token" // This approach eliminates the need for the client to make additional server requests for token validation, such as a refresh token request in the OAuth2 flow.
        }
    }, "http://localhost:9090"
);

@test:Config {
    groups: ["mock_service_test"]
}
function testMockGetTaxList() returns error? {

    GetCrmV3ObjectsTaxes_getpageQueries params = {
        'limit: 5,
        properties: ["hs_value", "hs_type", "hs_label"]
    };

    CollectionResponseSimplePublicObjectWithAssociationsForwardPaging response = check mockClient->/.get({}, params);

    foreach var result in response.results {
        test:assertNotEquals(result.id, (), "Tax id is not found");
        test:assertNotEquals(result.properties, (), "Tax properties are not found");
        test:assertNotEquals(result.properties["hs_type"], (), "Tax type is not found");
        test:assertNotEquals(result.properties["hs_value"], (), "Tax value is not found");
        test:assertNotEquals(result.properties["hs_label"], (), "Tax label is not found");
    }
    test:assertTrue(response.results.length() <= 5, "Tax list is not found");

}

@test:Config {
    groups: ["mock_service_test"]
}
function testMockPostBatchUpsert() returns error? {

    BatchInputSimplePublicObjectBatchInputUpsert payload = {
        inputs: [
            {
                idProperty: "string1",
                objectWriteTraceId: "1234",
                id: "395102392355",
                properties: {
                    "hs_label": "A percentage-based tax of 4.5%",
                    "hs_value": "4.5000",
                    "hs_type": "PERCENT"
                }
            },
            {
                idProperty: "string2",
                objectWriteTraceId: "12345",
                id: "395102392356",
                properties: {
                    "hs_label": "A percentage-based tax of 4.75%",
                    "hs_value": "4.7500",
                    "hs_type": "PERCENT"
                }
            }
        ]

    };

    BatchResponseSimplePublicUpsertObject|BatchResponseSimplePublicUpsertObjectWithErrors response = 
        check mockClient->/batch/upsert.post(payload);

    if response is BatchResponseSimplePublicUpsertObjectWithErrors {
        test:assertFail("Error occured while batch upserting taxes");
    }
    else {
        test:assertEquals(response.status, "COMPLETE", "Batch upsert failed");
        test:assertEquals(response.results.length(), 2, "Not all the taxes are upserted");
        test:assertNotEquals(response.results[0].id, (), "Id of an upserted tax is null");
        test:assertNotEquals(response.results[1].id, (), "Id of an upserted tax is null");

        foreach var result in response.results {
            string id = result.id;
            string expectedLabel = id == "395102392355" ? "A percentage-based tax of 4.5%" 
                                        : "A percentage-based tax of 4.75%";
            string expectedValue = id == "395102392355" ? "4.5000" : "4.7500";
            test:assertEquals(result.properties["hs_label"], expectedLabel, "Tax label is not upserted");
            test:assertEquals(result.properties["hs_value"], expectedValue, "Tax value is not upserted");
        }
    }
}